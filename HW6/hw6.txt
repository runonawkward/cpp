William Walter
Intro to C+CPP
Fall 2016
Problem Set 6


Problem 8-4:
#include <stdio.h>

float absolute_value(x)
  float x;
{
  if (x < 0)
    x = -x;

  return x;
}

float square_root(x)
  float x;
{
  float epsilon = .0001;
  float guess = 1.0;

  while( absolute_value( guess * guess - x) >= epsilon)
  {
    guess = (x / guess + guess ) / 2.0;
    printf("%f\n", guess);
  }

  return(guess);
}

main()
{
  float input;
  printf("Put in an integer\n");
  scanf("%f",&input);
  printf("square_root (%f) = %f\n", input, square_root(input));
}

Put in an integer
15
8.000000
4.937500
3.987737
3.874635
3.872984
square_root (15.000000) = 3.872984


Problem 8-7:

#include <stdio.h>
float absolute_value(x)
  float x;
{
  if (x < 0)
    x = -x;

  return x;
}

float square_root(x)
  float x;
{
  float epsilon = .00001;
  float guess = 1.0;

  while( absolute_value( guess * guess - x) >= epsilon)
  {
     guess = (x / guess + guess ) / 2.0;
  }

  return(guess);
}

float get_discrim(a,b,c)
  float a,b,c;
{
  return ((b*b) - (4*a*c));
}
int main()
{
  float a,b,c,discrim, roota, rootb;
  int imaginary = 0;
  printf("Please enter a:\n");
  scanf("%f", &a);

  printf("Please enter b:\n");
  scanf("%f", &b);

  printf("Please enter c:\n");
  scanf("%f", &c);

  discrim = get_discrim(a,b,c);
  if (discrim < 0)
    imaginary = 1;

  roota = (-b + square_root(discrim))/(2*a);
  rootb = (-b - square_root(discrim))/(2*a);
  if (imaginary)
    printf("The roots are imaginary.\n");
  printf("%f,%f\n", roota, rootb);
  return 0;
}

Please enter a:
3
Please enter b:
5
Please enter c:
2
-0.666667,-1.000000

Probelm 8-11:
#include <stdio.h>
void transpose_matrix(matrixM, matrixN)
  int matrixM[4][5];
  int matrixN[5][4];
{
  for(int i = 0; i < 4; ++i )
  {
    for( int j = 0; j < 5; ++j)
    {
      matrixN[j][i] = matrixM[i][j];
    }
  }
 return;
}

int main()
{

  int matrixM[4][5] = {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20};
  int matrixN[5][4];
  transpose_matrix(matrixM,matrixN);
  printf("Matrix M\n");
  for( int i = 0; i < 4; ++i)
  {
    for( int j = 0; j < 5; ++j)
    {
      printf("%d ", matrixM[i][j]);
    }
    printf("\n");
  }

  printf("Matrix N\n");
  for( int i = 0; i < 5; ++i)
  {
    for( int j = 0; j < 4; ++j)
    {
      printf("%d ", matrixN[i][j]);
    }
    printf("\n");
  }
  return 0;
}
Matrix M
1 2 3 4 5
6 7 8 9 10
11 12 13 14 15
16 17 18 19 20
Matrix N
1 6 11 16
2 7 12 17
3 8 13 18
4 9 14 19
5 10 15 20


Problem 13-4:
#include <stdio.h>
#define SHIFT(value, n)     ( (n) > 0 ? ((value) << (n)): ((value) >> -(n)))

int main(){
  printf("SHIFT 6,2 should be 24: %d",SHIFT(6,2));
}

#include <stdio.h>
#define MAX(a,b)    ( (a) > (b) ? (a):(b))
#define MAX3(a,b,c)     (MAX(MAX(a,b),c))

int main()
{
  printf("Max of 4,15,6: %d\n", MAX3(4,(10 + 5),6));
}
#include <stdio.h>
#define IS_UPPER_CASE(a)    ( ((a) >= 'A' && (a) <= 'Z') ? 1:0)

int main()
{
  if (IS_UPPER_CASE('A'))
    printf("A is upper case\n");
  else
    printf("The macro failed\n");
  if (IS_UPPER_CASE('Z'))
    printf("Z is upper case\n");
  else
    printf("The macro failed\n");
  if (IS_UPPER_CASE('$'))
    printf("The macro failed\n");
  else
    printf("$ is not upper case\n");
}

A is upper case
Z is upper case
$ is not upper case

