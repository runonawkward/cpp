William Walter
Intro to C + CPP
HW8


#include <stdio.h>

struct date
{
  int month;
  int day;
  int year;
};
int compare(struct date date1, struct date date2);
int getN(struct date);
int main()
{
  struct date start_date,end_date;
  printf("Please enter a numeric start date delimited by spaces.\n\
      e.g. 1 12 2007 for 12, Jan 2007.\n");
  scanf("%d%d%d", &start_date.month, &start_date.day, &start_date.year);

  printf("Please enter a numeric end date delimited by spaces.\n\
      e.g. 1 12 2007 for 12, Jan 2007.\n");
  scanf("%d%d%d", &end_date.month, &end_date.day, &end_date.year);
  if( compare(start_date, end_date) == 1)
  {
    printf("Start date is greater than end date...\n");
    return 1;
  }
  else if(compare(start_date, end_date) == 0)
  {
    printf("Start date and end date are that same date.");
  }
  else
  {
    printf("There are %i days between the start and end dates\n",\
      getN(end_date) - getN(start_date));
  }
  return 0;
}

int compare(struct date date1, struct date date2)
{
  int value;// 1 greater 0 equal -1 less
  if( date1.year > date2.year)
    value = 1;
  else if( date1.year < date2.year)
    value = -1;
  else 
  {
    if( date1.month > date2.month)
      value = 1;
    else if( date1.month < date2.month)
      value = -1;
    else
    {
      if( date1.day > date2.day)
        value = 1;
      else if( date1.day < date2.day)
        value = -1;
      else
        value = 0;
    }
  }
  return value;
}
int getN(struct date date1)
{
  int f,g, value;
  struct date mar11800 = {1,3,1800},\
    feb281900 = {2,28,1900},\
    mar11700 = {1,3,1700},\
    feb281800 = {2,28,1800};
  if(date1.month <= 2)
  {
    f = date1.year - 1;
    g = date1.month + 13;
  }
  else
  {
    f = date1.year;
    g = date1.month +1;
  }

  value =  ((1461 * f) / 4) + ((153 * g) / 5) + date1.day;
// if  mar 1 1800 >= date1 <= feb 28 1900
  if ( (compare(date1,mar11800) == 1 ) && (compare(date1,feb281900) <= 0))
    value += 1;
  else if ( (compare(date1,mar11700) == 1 ) && (compare(date1,feb281800) <= 0))
    value += 2;
  return value;
}

./ans9_2.out
Please enter a numeric start date delimited by spaces.
      e.g. 1 12 2007 for 12, Jan 2007.
1 12 2007
Please enter a numeric end date delimited by spaces.
      e.g. 1 12 2007 for 12, Jan 2007.
2 12 2007
There are 31 days between the start and end dates


#include <stdio.h>

struct time
{
  int hours,minutes,seconds;
};

struct time elapsed_time(struct time start_time, struct time end_time);

int main()
{
  struct time start_time, end_time, elapsed;
  char a;
  printf("Please enter a time string in the format.\n\
      hh:mm:ss\n");
  scanf("%d%c%d%c%d", &start_time.hours, &a,\
      &start_time.minutes,&a,&start_time.seconds);

  printf("Please enter a time string in the format.\n\
      hh:mm:ss\n");
  scanf("%d%c%d%c%d", &end_time.hours, &a,\
      &end_time.minutes,&a,&end_time.seconds);

  elapsed = elapsed_time(start_time, end_time);
  printf("Time elapsed between start and end: %.2d:%.2d:%.2d\n", \
      elapsed.hours,elapsed.minutes, elapsed.seconds);
  return 0;
}
struct time elapsed_time(struct time start_time, struct time end_time)
{
  //set duration to zero
  struct time duration = {0,0,0};
  int start_sec = start_time.hours * 3600 +\
                  start_time.minutes * 60 + start_time.seconds;
  int end_sec = end_time.hours * 3600 +\
                  end_time.minutes * 60 + end_time.seconds;
  int one_day = 24 * 3600, current = 0;

  if( start_sec > end_sec )
  {
    current = one_day - (start_sec - end_sec);
  }
  else if ( start_sec < end_sec )
  {
    current = end_sec - start_sec;
  }
  else
    current = one_day;

  duration.hours = current / 3600;
  current %= 3600;
  duration.minutes = current / 60;
  current %=  60;
  duration.seconds = current;
  return duration;
}

./ans9_3.out
Please enter a time string in the format.
      hh:mm:ss
01:55:10
Please enter a time string in the format.
      hh:mm:ss
01:55:09
Time elapsed between start and end: 23:59:59
#include <stdio.h>
int get_size(void);
int bitpat_search(unsigned int source, unsigned int pattern, int n);

int main()
{
  unsigned int source = 0xe1f4, pattern = 0x5;
  const int SIZE = get_size();
  int n = 3;
  printf("Pattern: %.8x found at bit index %d in %d bit unsigned integer %.8x\n", pattern, bitpat_search(source, pattern, n), SIZE, source);
  return 0;
}

int get_size(void)
{
  int size = 0;
  unsigned int sizer = ~0;
  while( sizer > 0 )
  {
    ++size;
    sizer >>= 1;
  }
  return size;
}
int bitpat_search(unsigned int source, unsigned int pattern, int n)
{
  const int SIZE = get_size();
  int counter = 0, result;
  // 1 ^ 1 = 0
  // 1 ^ 0 = 1
  // 0 ^ 0 = 0

  unsigned int shift_source, shift_pattern;
  //shift the N left most bits in source into the right N bits
  for(;counter < SIZE - n; ++counter)
  {
    shift_source = source >> (SIZE - n);
    result = shift_source ^ pattern;
    if ( result == 0 )
    {
      break;
    }
    source <<= 1;
  }
  return counter;
}

./ans12_6.out
Pattern: 00000005 found at bit index 27 in 32 bit unsigned integer 0000e1f4

#include <stdio.h>

int get_size(void);
unsigned int bitpat_get(unsigned int source, int start_point, int end_point);
int main()
{
  unsigned int pattern = 0xe1f4;
  int start_point = 17, end_point = 4;
  unsigned int answer = bitpat_get(pattern, start_point, end_point);
  printf("Bits %d to %d of unsigned int %x are %x\n", start_point, start_point + end_point, pattern, answer);
  return 0;
}
int get_size(void)
{
  int size = 0;
  unsigned int sizer = ~0;
  while( sizer > 0 )
  {
    ++size;
    sizer >>= 1;
  }
  return size;
}

unsigned int bitpat_get(unsigned int source, int start_point, int end_point)
{
  const int SIZE = get_size();
  source <<= start_point -1;
  source >>= SIZE - end_point;
  return source;
}

./ans12_7.out
Bits 17 to 21 of unsigned int e1f4 are e
